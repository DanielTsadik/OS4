        -:    0:Source:RandomGraph.cpp
        -:    1:#include "graph.hpp"
        -:    2:#include "euler_circuit.hpp"
        -:    3:#include <iostream>
        -:    4:#include <cstdlib>
        -:    5:#include <ctime>
        -:    6:#include <set>
        -:    7:#include <vector>
        -:    8:#include <stack>
        -:    9:#include <algorithm>
        -:   10:
    #####:   11:void generateRandomGraph(Graph& graph, int numEdges, int numVertices) {
    #####:   12:    std::set<std::pair<int, int>> uniqueEdges;
        -:   13:
    #####:   14:    while (uniqueEdges.size() < static_cast<std::set<std::pair<int, int>>::size_type>(numEdges)) {
    #####:   15:        int src = rand() % numVertices;
    #####:   16:        int dest = rand() % numVertices;
        -:   17:
    #####:   18:        if (src != dest) {
    #####:   19:            auto edge = std::make_pair(std::min(src, dest), std::max(src, dest));
    #####:   20:            if (uniqueEdges.find(edge) == uniqueEdges.end()) {
    #####:   21:                uniqueEdges.insert(edge);
    #####:   22:                graph.addEdge(src, dest);
        -:   23:            }
        -:   24:        }
        -:   25:    }
    #####:   26:}
        -:   27:
    #####:   28:void printEdges(const Graph& graph) {
    #####:   29:    std::set<std::pair<int, int>> uniqueEdges;
        -:   30:
    #####:   31:    for (int i = 0; i < graph.getNumVertices(); ++i) {
    #####:   32:        for (int neighbor : graph.getAdjList(i)) {
    #####:   33:            if (i <= neighbor) {
    #####:   34:                uniqueEdges.insert(std::make_pair(i, neighbor));
        -:   35:            }
        -:   36:        }
        -:   37:    }
        -:   38:
    #####:   39:    std::cout << "Generated Graph:\n";
    #####:   40:    for (const auto& edge : uniqueEdges) {
    #####:   41:        std::cout << edge.first << " - " << edge.second << std::endl;
        -:   42:    }
    #####:   43:}
        -:   44:
    #####:   45:std::vector<int> findEulerCircuit(Graph graph) {
    #####:   46:    std::vector<int> circuit;
    #####:   47:    if (!hasEulerCircuit(graph)) {
    #####:   48:        return circuit; // Return empty if no Euler circuit exists
        -:   49:    }
        -:   50:
    #####:   51:    std::stack<int> path;
    #####:   52:    path.push(0); // Start from vertex 0
    #####:   53:    int current = 0;
        -:   54:
    #####:   55:    while (!path.empty()) {
    #####:   56:        if (!graph.getAdjList(current).empty()) {
    #####:   57:            path.push(current);
    #####:   58:            int next = graph.getAdjList(current).front();
    #####:   59:            graph.removeEdge(current, next);
    #####:   60:            current = next;
        -:   61:        } else {
    #####:   62:            circuit.push_back(current);
    #####:   63:            current = path.top();
    #####:   64:            path.pop();
        -:   65:        }
        -:   66:    }
        -:   67:
    #####:   68:    std::reverse(circuit.begin(), circuit.end());
    #####:   69:    return circuit;
        -:   70:}
        -:   71:
        1:   72:int main() {
        -:   73:    int numEdges, numVertices, seed;
        -:   74:
        1:   75:    std::cout << "Enter the number of vertices: ";
        1:   76:    std::cin >> numVertices;
        -:   77:
        1:   78:    std::cout << "Enter the number of edges: ";
        1:   79:    std::cin >> numEdges;
        -:   80:
        1:   81:    std::cout << "Enter the seed for random generation: ";
        1:   82:    std::cin >> seed;
        -:   83:
        1:   84:    if (numEdges <= 0 || numVertices <= 0) {
    #####:   85:        std::cerr << "Number of edges and vertices must be greater than 0." << std::endl;
    #####:   86:        return 1;
        -:   87:    }
        -:   88:
        1:   89:    int maxEdges = (numVertices * (numVertices - 1)) / 2;
        -:   90:
        1:   91:    if (numEdges > maxEdges) {
        1:   92:        std::cerr << "Number of edges exceeds the maximum possible edges for the given number of vertices." << std::endl;
        1:   93:        return 1;
        -:   94:    }
        -:   95:
    #####:   96:    srand(seed);
        -:   97:
    #####:   98:    Graph graph(numVertices);
    #####:   99:    generateRandomGraph(graph, numEdges, numVertices);
    #####:  100:    printEdges(graph);
        -:  101:
    #####:  102:    if (hasEulerCircuit(graph)) {
    #####:  103:        std::cout << "The graph has an Euler circuit.\n";
    #####:  104:        std::vector<int> eulerCircuit = findEulerCircuit(graph);
    #####:  105:        std::cout << "Euler Circuit: ";
    #####:  106:        for (size_t i = 0; i < eulerCircuit.size(); ++i) {
    #####:  107:            std::cout << eulerCircuit[i];
    #####:  108:            if (i != eulerCircuit.size() - 1) {
    #####:  109:                std::cout << " -> ";
        -:  110:            }
        -:  111:        }
    #####:  112:        std::cout << std::endl;
        -:  113:    } else {
    #####:  114:        std::cout << "The graph does not have an Euler circuit." << std::endl;
        -:  115:    }
        -:  116:
    #####:  117:    return 0;
        -:  118:}
